geom_line()
umbrales <- seq(0.00, 1, 0.001)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
umbrales <- seq(0.00, 1, 0.002)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  reorder(round(fpr, 2), ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  reorder(round(fpr, 1), ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.1))
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_discrete(breaks = seq(0, 1, 0.1))
seq(0, 1, 0.1)
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.1))
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_discrete(breaks = seq(0, 1, 0.1))
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_discrete(breaks = breaks = c(0, 0.5, 1))
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_discrete(breaks  = c(0, 0.5, 1))
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_discrete(breaks  = c(0, 0.2 0.4, 0.6, 0.8, 1))
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line() +
scale_x_discrete(breaks  = c(0, 0.2, 0.4, 0.6, 0.8, 1))
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
umbrales <- runif(n = 200)
umbrales
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
umbrales <- runif(n = 100)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
umbrales <- runif(n = 200)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
# roc_df %>%
#   ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
#   geom_line() +
#   scale_x_discrete(breaks  = c(0, 0.2, 0.4, 0.6, 0.8, 1))
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
umbrales <- runif(n = 100)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
# roc_df %>%
#   ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
#   geom_line() +
#   scale_x_discrete(breaks  = c(0, 0.2, 0.4, 0.6, 0.8, 1))
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
umbrales <- runif(n = 300)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
# roc_df %>%
#   ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
#   geom_line() +
#   scale_x_discrete(breaks  = c(0, 0.2, 0.4, 0.6, 0.8, 1))
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
umbrales <- runif(n = 170)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
# roc_df %>%
#   ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
#   geom_line() +
#   scale_x_discrete(breaks  = c(0, 0.2, 0.4, 0.6, 0.8, 1))
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
length(unique(umbrales))
umbrales <- runif(n = 200)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line()
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline()
get_confusion_matrix <- function(umbral, predicciones, test_data) {
predictions_test <- if_else(predicciones >= umbral, 1, 0)
df <- data.frame(real = test_set$survived, pred = predictions_test)
confusion <- table(df$real, df$pred)
# Si solo hay predicciones positivas
if (sum(df$pred == 1 ) == nrow(df) ) {
`0` = c(0, 0)
return (cbind(`0`, confusion))
# Si solo hay predicciones negativas
} else if (sum(df$pred == 0 ) == nrow(df)) {
`1` = c(0, 0)
return(cbind(confusion,   `1`))
} else {
return(confusion)
}
}
get_tpr <- function(confusion) {
tp = confusion[2, 2]
fn = confusion[2, 1]
tp / (tp + fn)
}
get_fpr <- function(confusion) {
fp = confusion[1, 2]
tn = confusion[1 ,1]
fp / (fp + tn)
}
umbrales <- seq(0.00, 1, 0.002)
set.seed(123)
umbrales <- runif(n = 200)
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold ) %>%
arrange(fpr, threshold2) %>%
mutate(ordenar = row_number())
# roc_df %>%
#   ggplot(aes(x =  reorder(fpr, ordenar) , tpr  , group = 1 )) +
#   geom_line()
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline()
set.seed(123)
umbrales <- runif(n = 200) # números random
# Calculamos 200 matrices de confusión
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
# Calculamos tpr y fpr para cada una de las matrices
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
# Graficamos los resultados
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales)
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline() +
theme_bw()
set.seed(1234)
umbrales <- runif(n = 200) # números random
# Calculamos 200 matrices de confusión
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
# Calculamos tpr y fpr para cada una de las matrices
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
# Graficamos los resultados
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales)
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline() +
theme_bw()
set.seed(1234)
umbrales <- runif(n = 100) # números random
# Calculamos 200 matrices de confusión
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
# Calculamos tpr y fpr para cada una de las matrices
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
# Graficamos los resultados
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales)
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline() +
theme_bw()
View(roc_df)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold)
arrange(fpr)
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold) %>%
arrange(fpr)
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline() +
theme_bw()
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold) %>%
arrange(fpr, threshold2)
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline() +
theme_bw()
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline() +
theme_bw()
set.seed(1234)
umbrales <- runif(n = 200) # números random
# Calculamos 200 matrices de confusión
confusion_list <-  map(umbrales, ~get_confusion_matrix(.x, predict_reg2, test_set$survived))
# Calculamos tpr y fpr para cada una de las matrices
tpr_list <- map_dbl(confusion_list, get_tpr)
fpr_list <- map_dbl(confusion_list, get_fpr)
# Graficamos los resultados
roc_df <- data.frame(tpr = tpr_list, fpr = fpr_list, threshold = umbrales) %>%
mutate(threshold2 = 1 - threshold) %>%
arrange(fpr, threshold2)
roc_df %>%
ggplot(aes(x =  fpr , tpr  , group = 1 )) +
geom_line() +
geom_abline() +
theme_bw()
dtrain <- xgb.DMatrix(data = train_set %>% select(-survived) %>% as.matrix(),
label = train_set$survived)
library(xgboost)
dtrain <- xgb.DMatrix(data = train_set %>% select(-survived) %>% as.matrix(),
label = train_set$survived)
model_xgb <- xgboost(survived ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard,
data = dtrain)
model_xgb <- xgboost(survived ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard,
data = dtrain, nrounds = 10, objective = "binary:logistic", verbose = T)
model_xgb <- xgboost(survived ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard,
data = dtrain, nrounds = 10, objective = "binary:logistic", verbose = F)
model_xgb <- xgboost(survived ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard,
data = dtrain,
nrounds = 10,
max.depth = 6,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb,
train_set %>% as.matrix()
)
predict_xgb_train <- predict(model_xgb,
train_set %>% select(sex_male,
pclass_2, pclass_3, age, fare, siblings_spouses_aboard, parents_children_aboard) %>% as.matrix()
)
model_xgb <- xgboost(survived ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard,
data = dtrain,
nrounds = 10,
max.depth = 6,
objective = "binary:logistic",
verbose = F)
covariables <- c("sex_male", "pclass_2", "pclass_3", "age", "fare", "siblings_spouses_aboard", "parents_children_aboard")
dtrain <- xgb.DMatrix(data = train_set %>% select(all_of(covariables)) %>% as.matrix(),
label = train_set$survived)
model_xgb <- xgboost(
data = dtrain,
nrounds = 10,
max.depth = 6,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predict_xgb_train
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 20,
max.depth = 6,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 6,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 8,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 80,
max.depth = 8,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 8,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 10,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 14,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(acc_train)
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 12,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
predictions_test <- predict(model_xgb, test_set %>% select(-survived) %>% as.matrix())
predictions_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
acc_test <- mean(test_set$survived == predictions_test)
print(acc_train)
print(acc_test)
predict_xgb_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
predict_xgb_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
predictions_test <- if_else(predict_xgb_test > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(acc_test)
model_xgb <- xgboost(
data = dtrain,
nrounds = 60,
max.depth = 14,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
predict_xgb_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
predictions_test <- if_else(predict_xgb_test > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(acc_test)
model_xgb <- xgboost(
data = dtrain,
nrounds = 60,
max.depth = 16,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
predict_xgb_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
predictions_test <- if_else(predict_xgb_test > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(acc_test)
model_xgb <- xgboost(
data = dtrain,
nrounds = 60,
max.depth = 18,
objective = "binary:logistic",
verbose = F)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(acc_train)
predict_xgb_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
predictions_test <- if_else(predict_xgb_test > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(acc_test)
predict_xgb_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
predictions_test <- if_else(predict_xgb_test > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(sprintf("acc en test set: %s", acc_test) )
predict_xgb_test <- predict(model_xgb, test_set %>% select(all_of(covariables)) %>% as.matrix())
predictions_test <- if_else(predict_xgb_test > 0.5, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
print(sprintf("acc en test set: %s", round(acc_test, 3)) )
