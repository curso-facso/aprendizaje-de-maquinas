gastos_bencina
hogares <- personas2 %>%
group_by(folio) %>%
mutate_at(c("mujer", "hombre", "ocupado"), .funs = sum ) %>%
mutate_at(vars(starts_with("edad_tramos_")) , .funs = sum) %>%
slice(1) %>%
ungroup() %>%
select(-c("sexo", "edad", "aecise", "edad_tramos", "zona")) %>%
left_join(gastos_bencina %>% select(folio, glosa), by = "folio")
View(personas)
View(hogares)
hogares <- personas2 %>%
group_by(folio) %>%
mutate_at(c("mujer", "hombre", "ocupado"), .funs = sum ) %>%
mutate_at(vars(starts_with("edad_tramos_")) , .funs = sum) %>%
slice(1) %>%
ungroup() %>%
select(-c("sexo", "edad", "aecise", "edad_tramos", "zona")) %>%
left_join(gastos_bencina %>% select(folio, glosa), by = "folio") %>%
mutate(bencina = if_else(!is.na(glosa), 1, 0))
View(hogares)
hogares <- personas2 %>%
group_by(folio) %>%
mutate_at(c("mujer", "hombre", "ocupado"), .funs = sum ) %>%
mutate_at(vars(starts_with("edad_tramos_")) , .funs = sum) %>%
slice(1) %>%
ungroup() %>%
select(-c("sexo", "edad", "aecise", "edad_tramos", "zona")) %>%
left_join(gastos_bencina %>% select(folio, glosa), by = "folio") %>%
mutate(bencina = if_else(!is.na(glosa), 1, 0)) %>%
select(-glosa)
library(caret)
train_indices <- createDataPartition( hogares$bencina, times = 1, p = 0.8, list = FALSE)
train_indices <- createDataPartition( hogares$bencina, times = 1, p = 0.8, list = FALSE)
train_set <-  hogares[train_indices, ]
test_set <-  hogares[-train_indices, ]
library(xgboost)
dtrain <- xgb.DMatrix(data = train_set %>% as.matrix(),
label = train_set$bencina)
train_set$bencina
View(test_set)
train_indices <- createDataPartition( hogares$bencina, times = 1, p = 0.8, list = FALSE)
train_set <-  hogares[train_indices, ]
test_set <-  hogares[-train_indices, ]
train_set
dtrain <- xgb.DMatrix(data = train_set %>% as.matrix(),
label = train_set$bencina)
dtrain <- xgb.DMatrix(data = train_set ,
label = train_set$bencina)
View(hogares)
View(train_set)
train_set %>% class()
class(train_set$bencina)
dtrain <- xgb.DMatrix(data = train_set ,
label = train_set$bencina)
dtrain <- xgb.DMatrix(data = train_set %>% as.data.frame() ,
label = train_set$bencina)
dtrain <- xgb.DMatrix(data = train_set %>% as.matrix ,
label = train_set$bencina)
t <- train_set %>% as.matrix()
View(t)
train_set$ing_disponible %>% class()
dtrain <- xgb.DMatrix(data = train_set %>% select(-folio) %>% as.matrix() ,
label = train_set$bencina)
model_xgb <- xgboost(
data = dtrain,
nrounds = 10,
max.depth = 2,
objective = "binary:logistic",
verbose = T)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
print(sprintf("acc en test set: %s", round(acc_train, 3)) )
acc_train
predict_xgb_train
acc_train <- mean(train_set$bencina == predictions_train)
print(sprintf("acc en test set: %s", round(acc_train, 3)) )
dtrain <- xgb.DMatrix(data = train_set %>% select(-folio, -bencina) %>% as.matrix() ,
label = train_set$bencina)
model_xgb <- xgboost(
data = dtrain,
nrounds = 10,
max.depth = 2,
objective = "binary:logistic",
verbose = T)
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$bencina == predictions_train)
print(sprintf("acc en test set: %s", round(acc_train, 3)) )
model_xgb <- xgboost(
data = dtrain,
nrounds = 10,
max.depth = 4,
objective = "binary:logistic",
verbose = T)
# Predecir
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$bencina == predictions_train)
print(sprintf("acc en test set: %s", round(acc_train, 3)) )
model_xgb <- xgboost(
data = dtrain,
nrounds = 20,
max.depth = 4,
objective = "binary:logistic",
verbose = T)
# Predecir
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$bencina == predictions_train)
print(sprintf("acc en test set: %s", round(acc_train, 3)) )
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 4,
objective = "binary:logistic",
verbose = T)
# Predecir
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$bencina == predictions_train)
print(sprintf("acc en test set: %s", round(acc_train, 3)) )
model_xgb <- xgboost(
data = dtrain,
nrounds = 40,
max.depth = 6,
objective = "binary:logistic",
verbose = T)
# Predecir
predict_xgb_train <- predict(model_xgb, dtrain)
predictions_train <- if_else(predict_xgb_train > 0.5, 1, 0)
acc_train <- mean(train_set$bencina == predictions_train)
print(sprintf("acc en test set: %s", round(acc_train, 3)) )
hogares$bencina
View(hogares)
predict_xgb_test <- predict(model_xgb, test_set %>% select(-bencina, -folio))
test_set %>% select(-bencina, -folio)
predict_xgb_test <- predict(model_xgb, test_set %>% select(-bencina, -folio) %>% as.matrix())
predictions_test <- if_else(predict_xgb_test > 0.5, 1, 0)
acc_test <- mean(test_set$bencina == predictions_test)
print(sprintf("acc en test set: %s", round(acc_test, 3)) )
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.retina=3,
out.width = "50%",
cache = FALSE,
echo = FALSE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe)
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp))
gastos_clean
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp)) %>%
ungroup() %>%
filter(!is.na(gasto_div))
total_hogares <- personas %>%
clean_names() %>%
group_by(folio) %>%
slice(1) %>%
ungroup() %>%
mutate(total_exp = sum(fe))
total_hogares <- personas %>%
clean_names() %>%
group_by(folio) %>%
dplyr::slice(1) %>%
ungroup() %>%
mutate(total_exp = sum(fe))
total_hogares
total_hogares <- personas %>%
clean_names() %>%
group_by(folio) %>%
dplyr::slice(1) %>%
ungroup() %>%
summarise() %>%
mutate(total_exp = sum(fe))
total_hogares <- personas %>%
clean_names() %>%
group_by(folio) %>%
dplyr::slice(1) %>%
ungroup() %>%
summarise(total_exp = sum(fe))
total_hogares
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp)) %>%
ungroup() %>%
filter(!is.na(gasto_div)) %>%
mutate(total_hogares = total_hogares %>% pull(total_exp))
gastos_clean
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp)) %>%
ungroup() %>%
filter(!is.na(gasto_div))
gastos_clean
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp)) %>%
ungroup() %>%
filter(!is.na(d)) %>%
mutate(total_hogares = total_hogares %>% pull(total_exp))
gastos_clean
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp)) %>%
ungroup() %>%
filter(!is.na(d)) %>%
mutate(prop = total_hogares / sum(total_hogares)) %>%
mutate(total_hogares = total_hogares %>% pull(total_exp))
gastos_clean
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp)) %>%
ungroup() %>%
filter(!is.na(d)) %>%
mutate(prop = gasto_div / sum(gasto_div)) %>%
mutate(total_hogares = total_hogares %>% pull(total_exp))
gastos_clean
gastos_clean <- gastos %>%
clean_names() %>%
filter(ccif != "04.2.1.01.01" & ccif != "04.2.2.01.01" & ccif != "04.2.2.01.02" & folio != "") %>%
mutate(gasto_exp = gasto * fe) %>%
group_by(d) %>%
summarise(gasto_div = sum(gasto_exp)) %>%
ungroup() %>%
filter(!is.na(d)) %>%
mutate(prop = gasto_div / sum(gasto_div) * 100) %>%
mutate(total_hogares = total_hogares %>% pull(total_exp))
gastos_clean
library(feather)
write_feather(gastos_clean, "data/estructura_gastos.feather")
gastos <-  read_feather("data/estructura_gastos.feather")
gastos
gastos %>%
mutate(prop = round(prop, 2))
gastos %>%
mutate(prop = round(prop, 2)) %>%
ggplot(aes(d, prop)) +
geom_bar(stat = "identity")
gastos %>%
mutate(prop = round(prop, 2)) %>%
ggplot(aes(d, prop, fill = d)) +
geom_bar(stat = "identity")
gastos %>%
mutate(prop = round(prop, 2)) %>%
ggplot(aes(d, prop, fill = d)) +
geom_bar(stat = "identity") %>%
theme_bw() %>%
theme(legend.position = "none")
gastos %>%
mutate(prop = round(prop, 2)) %>%
ggplot(aes(d, prop, fill = d)) +
geom_bar(stat = "identity") +
theme_bw() +
theme(legend.position = "none")
gastos %>%
mutate(prop = round(prop, 2)) %>%
ggplot(aes(d, prop, fill = d)) +
geom_bar(stat = "identity") +
geom_text(aes(label=prop)) +
theme_bw() +
theme(legend.position = "none")
gastos %>%
mutate(prop = round(prop, 2)) %>%
ggplot(aes(d, prop, fill = d)) +
geom_bar(stat = "identity") +
geom_text(aes(label=prop), vjust=-0.25) +
theme_bw() +
theme(legend.position = "none")
gastos %>%
mutate(prop = round(prop, 2)) %>%
ggplot(aes(d, prop, fill = d)) +
geom_bar(stat = "identity") +
geom_text(aes(label=prop), vjust=-0.25) +
labs(title = "Estructura de gastos de los hogares", subtitle = "VIII EPF") +
theme_bw() +
theme(legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
gastos <-  read_csv2("data/base-gastos-viii-epf-(formato-csv).csv")
gastos$D
gastos$GLOSA
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(
fig.retina=3,
out.width = "50%",
cache = FALSE,
echo = FALSE,
message = FALSE,
warning = FALSE,
hiline = TRUE
)
library(xaringanthemer)
xaringanExtra::use_clipboard()
xaringanExtra::use_panelset()
library(quanteda)
require(quanteda.textstats)
require(quanteda.textplots)
require(quanteda.corpora)
require(quanteda.textmodels)
library(kableExtra)
source("code/helpers.R")
library(tidyverse)
titanic <- read_csv("data/titanic.csv")
names(titanic)
library(tidyverse)
titanic %>%
count(Survived) %>%
mutate(Survived = as.factor(Survived)) %>%
ggplot(aes(x = Survived, y = n, fill = Survived )) +
geom_bar(stat = "identity") +
theme_bw() +
theme(legend.position = "none")
library(tidyverse)
titanic %>%
mutate(Survived = as.factor(Survived)) %>%
group_by(Sex, Survived) %>%
summarise(frecuencia = n()) %>%
group_by(Sex) %>%
mutate(porcentaje = frecuencia / sum(frecuencia)) %>%
ggplot(aes(x = Sex, y = porcentaje, fill = Survived )) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw()
titanic %>%
mutate(Survived = as.factor(Survived)) %>%
group_by(Pclass, Survived) %>%
summarise(frecuencia = n()) %>%
group_by(Pclass) %>%
mutate(porcentaje = frecuencia / sum(frecuencia)) %>%
ggplot(aes(x = Pclass, y = porcentaje, fill = Survived )) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw()
titanic %>%
mutate(Survived = as.factor(Survived)) %>%
group_by(Survived) %>%
summarise(media_edad = mean(Age),
media_precio = mean(Fare)) %>%
kbl() %>%
kable_styling()
titanic %>%
mutate(Survived = as.factor(Survived)) %>%
mutate(Age = if_else(Age < 1, 0, Age),
edad_tramo =cut(Age, breaks= seq(-1,max(Age) + 4, 5))
) %>%
group_by(Survived, edad_tramo) %>%
summarise(frecuencia = n()) %>%
group_by(edad_tramo) %>%
mutate(porcentaje = frecuencia / sum(frecuencia ) * 100) %>%
filter(Survived == 1) %>%
ggplot(aes(x = edad_tramo, y = porcentaje, group = 1)) +
geom_line() +
theme_bw()
titanic %>%
count(`Parents/Children Aboard`, Survived) %>%
group_by(`Parents/Children Aboard`) %>%
mutate(porcentaje = n / sum(n),
Survived = as.factor(Survived)) %>%
ggplot(aes(x = `Parents/Children Aboard`, y = porcentaje, fill = Survived )) +
geom_bar(stat = "identity", position =  position_dodge2(preserve = "single")) +
theme_bw()
titanic %>%
count(`Siblings/Spouses Aboard`, Survived) %>%
group_by(`Siblings/Spouses Aboard`) %>%
mutate(porcentaje = n / sum(n),
Survived = as.factor(Survived)) %>%
ggplot(aes(x = `Siblings/Spouses Aboard`, y = porcentaje, fill = Survived )) +
geom_bar(stat = "identity", position =  position_dodge2(preserve = "single")) +
theme_bw()
library(fastDummies)
library(janitor)
titanic2 <- dummy_cols(titanic, select_columns = c("Pclass", "Sex")) %>%
select(-c("Sex", "Name", "Pclass")) %>%
clean_names()
titanic2 <- titanic2 %>%
mutate_at(vars("age", "fare", "siblings_spouses_aboard", "parents_children_aboard"),
.funs = list(~(. - mean(.) ) / sd(.) )) %>%
select(-c("pclass_1", "sex_female"))
library(caret)
set.seed(123)
train_indices <- createDataPartition( titanic2$survived, times = 1, p = 0.8, list = FALSE)
train_set <-  titanic2[train_indices, ]
test_set <-  titanic2[-train_indices, ]
train_set %>%
count(survived) %>%
mutate(porcentaje = n / sum(n)) %>%
kbl(caption = "Train") %>%
kable_styling()
test_set %>%
count(survived) %>%
mutate(porcentaje = n / sum(n)) %>%
kbl(caption = "Test") %>%
kable_styling()
titanic2 %>%
count(survived) %>%
mutate(porcentaje = n / sum(n)) %>%
kbl(caption = "Total") %>%
kable_styling()
# Ajuste de una regresión logística
model <- glm(formula = survived ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard,
family = "binomial",
data = train_set)
# Predicción en el set de entrenamiento
predict_reg1 <- predict(model, train_set, type = "response")
# Predicción en el set de testeo
predict_reg2 <- predict(model, test_set, type = "response")
# Definición de un umbral. Usamos 0.5
predictions_train <- if_else(predict_reg1 > 0.5, 1, 0)
predictions_test <- if_else(predict_reg2 > 0.5, 1, 0)
# Calculamos el porcentaje de acierto en cada uno de los conjuntos
acc_train <- mean(train_set$survived == predictions_train)
acc_test <- mean(test_set$survived == predictions_test)
print(paste("acc train: ", acc_train) )
print(paste("acc test: ", acc_test) )
library(caret)
set.seed(123456)
train_indices <- createDataPartition( titanic2$survived, times = 1, p = 0.8, list = FALSE)
train_set <-  titanic2[train_indices, ]
test_set <-  titanic2[-train_indices, ]
model <- glm(formula = survived ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard,
family = "binomial",
data = train_set)
predict_reg1 <- predict(model, train_set, type = "response")
predict_reg2 <- predict(model, test_set, type = "response")
predictions_train <- if_else(predict_reg1 > 0.5, 1, 0)
predictions_test <- if_else(predict_reg2 > 0.5, 1, 0)
acc_train <- mean(train_set$survived == predictions_train)
acc_test <- mean(test_set$survived == predictions_test)
print(paste("acc train: ", acc_train) )
print(paste("acc test: ", acc_test) )
library(caret)
set.seed(12345)
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
crossval <- train(as.factor(survived) ~ sex_male + pclass_2 + pclass_3 + age + fare +
siblings_spouses_aboard + parents_children_aboard ,
data = train_set ,
method = "glm",
family=binomial(),
trControl = train_control)
crossval$resample %>%
select(-Kappa) %>%
kbl() %>%
kable_styling()
print(paste("mean acc:", round(mean(crossval$resample$Accuracy), 4)))
titanic %>%
count(Survived) %>%
mutate(Survived = as.factor(Survived),
porcentaje = round(n / sum(n) * 100, 2)
) %>%
ggplot(aes(x = Survived, y = porcentaje, fill = Survived )) +
geom_bar(stat = "identity") +
geom_text(aes(label=porcentaje), vjust=-0.25) +
theme_bw() +
theme(legend.position = "none")
confusion <- data.frame(real = test_set$survived, pred = predictions_test)
table(confusion$real, confusion$pred)
predictions_test <- if_else(predict_reg2 > 0.8, 1, 0)
acc_test <- mean(test_set$survived == predictions_test)
confusion_2 <- data.frame(real = test_set$survived, pred = predictions_test)
table(confusion$real, confusion$pred)
table(confusion_2$real, confusion_2$pred)
acc_08 <- as.character(round(mean(confusion_2$real == confusion_2$pred), 2))
acc_05 <-  as.character(round(mean(confusion$real == confusion$pred), 2))
calcular_acc <- function(umbral, predicciones, test_data) {
predictions_test <- if_else(predicciones > umbral, 1, 0)
return(mean(test_data == predictions_test))
}
acc_values <- map_dbl(seq(0.1, 0.9, 0.05), ~calcular_acc(.x, predict_reg2, test_set$survived) )
df <- data.frame(acc = acc_values, thresholds = seq(0.1, 0.9, 0.05))
max_acc = df %>% filter(acc == max(acc)) %>% pull(thresholds)
df %>%
ggplot(aes(x = thresholds, y = acc, group = 1)) +
geom_line() +
geom_vline( xintercept = max_acc ) +
theme_bw() +
annotate("text",  x = max_acc + 0.05, y = 0.75, label = round(max(df$acc), 2) )
predictions_test_055 <- if_else(predictions_test > max_acc, 1, 0)
confusion_055 <- data.frame(real = test_set$survived, pred = predictions_test_055)
table(confusion_055$real, confusion_055$pred)
max_acc
